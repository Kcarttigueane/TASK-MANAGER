
1) PACKAGES.JSON (infos):

    "keywords" : describe your project using related keywords.
    "author" : specifies who created the project, and can consist of a string or an object with contact or other details.
    "dependencies" : Packages required by your application in production.
    "devDependencies" : Packages that are only needed for local development and testing.

2) MySQL DATABASE (infos):


SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data   into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index


// app.get("/name/:name", (req, res) => {
//     if (req.is('html')) {
//         res.send(`<h1>Hello ${req.params.name}</h1>`);
//     } else if (req.is('json')) {
//         res.json({
//             name: req.params.name
//         });
//     }
//     else {
//         res.send(`Hello ${req.params.name}`);
//     }
// });

// app.get("/date", (req, res) => {
//     var date = new Date();
//     var year = date.getFullYear();
//     var month = date.getMonth();
//     if (month < 10) {
//         month = "0" + month;
//     }
//     var day = date.getDate();
//     res.send(year + "-" + month + "-" + day);
// });


// app.get("/api/:table", (req, res) => {
//     let table_name = req.params.table;
//     let sql = `SELECT * FROM ${table_name}`;
//     con.query(sql, function (err, result) {
//         if (err) throw err;
//         res.send(result);
//     });
// });


// insert a record inside a table using body parser
// app.post("/api/:table", urlencodedParser, (req, res) => {
//     let table_name = req.params.table;
//     let sql = `INSERT INTO ${table_name} SET ?`;
//     con.query(sql, req.body, function (err, result) {
//         if (err) throw err;
//         res.send(result);
//     });
// });


// const user_password = await db.query(db_query).catch(err => {
//     if (result.length > 0) {
//         res.json({
//             "msg": "Account already exists"
//         })
//     }

// });


const authHeader = req.headers['authorization'];
const token = authHeader && authHeader.split(' ')[1];
// console.log(token);
// NOTE: You should verify the first word is Bearer
